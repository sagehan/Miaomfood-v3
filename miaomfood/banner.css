/**Typesetting
 */
.card--cover figcaption { font-size: var(--s3); text-wrap:nowrap; }
.card--cover small { font-size: var(--s-2); line-height:normal; text-wrap:wrap; }
.card--cover ~ figure * { line-height: var(--s0); }
figure > figure > figcaption small span { text-combine-upright: all; }
address dd span { text-orientation:upright; }

/**Layout
 */
:has(> .this\.vcard) {
  --numcards: 3;
  display:flex;
  align-items:start;
}

.this\.vcard > * {
  /* aspect-ratio: 55 / 85; */
  inline-size: var(--banner-inline-size);
  block-size: var(--banner-block-size);
  padding: calc(var(--s1));
  display: flex;
  align-items: center;
  > * + * { margin-inline-start: var(--s0); }
}

img { max-block-size:100%; object-fit:contain; align-self:flex-start; }

.card--cover figcaption small {
  display: block;
  inline-size: 9ic;
  margin-inline-start: var(--s0);
}

figure:has(> figure > img) {
  figure { display:flex; margin-inline-start:calc(var(--s0) + 1em) !important; figcaption { display:contents;} }
  
  :nth-child(1 of figure) { flex-flow:column; }
  :nth-child(2 of figure) { flex-flow:column-reverse; }
  :nth-child(1 of figure) > img { inline-size: calc(100vh * 1 / 3 / 4 ); }
  :nth-child(2 of figure) > img { inline-size: calc(100vh * 1 / 3 / 4 / 1.618 ); }
  
  p:has(+ small) {
    margin-block-start: -1lh;
    text-indent: -1em;
    transform-origin: top left;
    transform: rotateZ(-90deg);
  }
  :nth-child(2 of figure) p {
    transform-origin: bottom right; 
    transform: translateY(calc(-100% - 1lh)) rotateZ(-90deg);
  }
}

figure dl dd span { display: inline-block; }

:has(> img[alt='location map']) {
  position: relative;
  > img {
    position: absolute;
    inset-block-start: 0;
    inset-inline-start: 0;
    + * { z-index: 1; }
  }
}

/**Appearance
 */
.this\.vcard > * {
  color: oklch(from white l c h);
  background-color: var(--card_bg);
}

.card--cover { color: var(--primary_cl); }
figure figcaption:first-child,
figure figcaption:first-child ~ figure :is(p, small),
dt, dd { mix-blend-mode: exclusion; }

/* figure figcaption:first-child, */
figure > :nth-child(-n+2 of figure) > img {
  filter: invert(0.85);
  mix-blend-mode: soft-light;
}

:has(> img[alt='location map']) > img { filter:
  grayscale(0.6)
  blur(3px)
  opacity(85%);
}

/**Animation
 * TODO: use cubic-bezier to implement seamless folding
 */
:has(> .this\.vcard) {
  transform-style: preserve-3d;
  perspective: calc(
    max(var(--banner-inline-size), var(--banner-block-size)) * 1.618033 * 1.618033);
}

.this\.vcard {
  &:hover > * {--sw:1;}
  > * {
    --sw: 0;
    z-index: calc(var(--numcards) - var(--index) + 1);
    transition: 1s;
    /* will-change: transform; */
  }
  > :nth-child(1) {
    --index:1;
    transform: translateY(calc(var(--sw) * var(--banner-inline-size)));
  }
  > :nth-child(2n+2) {
    --index:2;
    transform-origin: top;
    transform:
      translateY(calc(var(--sw) * var(--banner-inline-size) * 1))
      rotateX(calc(var(--sw) * -180deg));
  }
  > :nth-child(2n+3) {
    --index:3;
    transform:
      translateY(calc(var(--sw) * var(--banner-inline-size) * -1))
      translateZ(calc(var(--sw) * var(--banner-inline-size) * -1));
  }
}
